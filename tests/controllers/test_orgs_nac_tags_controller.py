# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mistapi.api_helper import APIHelper
from mistapi.models.nac_tag import NacTag


class OrgsNACTagsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(OrgsNACTagsControllerTests, cls).setUpClass()
        cls.controller = cls.client.orgs_nac_tags
        cls.response_catcher = cls.controller.http_call_back

    # Get Org NAC Tag
    def test_get_org_nac_tag(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nactag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_org_nac_tag(org_id, nactag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"match":"client_mac","name":"cameras","type":"match","values":["0'
            '10203040506","abcdef*"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get List of Org NAC Tags
    def test_list_org_nac_tags(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        mtype = None
        name = None
        match = None
        page = 1
        limit = 100

        # Perform the API call through the SDK function
        result = self.controller.list_org_nac_tags(org_id, mtype, name, match, page, limit)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Delete Org NAC Tag
    def test_delete_org_nac_tag(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nactag_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        self.controller.delete_org_nac_tag(org_id, nactag_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Update Org NAC Tag
    def test_update_org_nac_tag(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nactag_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_org_nac_tag(org_id, nactag_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"match":"client_mac","name":"cameras","type":"match","values":["0'
            '10203040506","abcdef*"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Org NAC Tag
    def test_create_org_nac_tag(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_org_nac_tag(org_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"match":"client_mac","name":"cameras","type":"match","values":["0'
            '10203040506","abcdef*"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

