# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from apimatic_core.utilities.file_helper import FileHelper
from mistapi.api_helper import APIHelper
from mistapi.models.nac_portal import NacPortal
from mistapi.models.nac_portal_template import NacPortalTemplate


class OrgsNACPortalsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(OrgsNACPortalsControllerTests, cls).setUpClass()
        cls.controller = cls.client.orgs_nac_portals
        cls.response_catcher = cls.controller.http_call_back

    # List Org NAC Portals
    def test_list_org_nac_portals(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100

        # Perform the API call through the SDK function
        result = self.controller.list_org_nac_portals(org_id, page, limit)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"access_type":"wireless","cert_expire_time":365,"enable_telemetr'
            'y":true,"expiry_notification_time":2,"name":"get-wifi","notify_exp'
            'iry":true,"ssid":"Corp","sso":{"idp_cert":"-----BEGIN CERTIFICATE-'
            '----\\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\\n-----'
            'END CERTIFICATE-----","idp_sign_algo":"sha256","idp_sso_url":"http'
            's://yourorg.onelogin.com/trust/saml2/http-post/sso/138130","issuer'
            '":"https://app.onelogin.com/saml/metadata/138130","nameid_format":'
            '"email","sso_role_matching":[{"assigned":"user","match":"Student"}'
            '],"use_sso_role_for_cert":true}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get Org NAC Portal
    def test_get_org_nac_portal(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nacportal_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        result = self.controller.get_org_nac_portal(org_id, nacportal_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"access_type":"wireless","cert_expire_time":365,"enable_telemetry'
            '":true,"expiry_notification_time":2,"name":"get-wifi","notify_expi'
            'ry":true,"ssid":"Corp","sso":{"idp_cert":"-----BEGIN CERTIFICATE--'
            '---\\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\\n-----E'
            'ND CERTIFICATE-----","idp_sign_algo":"sha256","idp_sso_url":"https'
            '://yourorg.onelogin.com/trust/saml2/http-post/sso/138130","issuer"'
            ':"https://app.onelogin.com/saml/metadata/138130","nameid_format":"'
            'email","sso_role_matching":[{"assigned":"user","match":"Student"}]'
            ',"use_sso_role_for_cert":true}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Org NAC Portal
    def test_update_org_nac_portal(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nacportal_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_org_nac_portal(org_id, nacportal_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"access_type":"wireless","cert_expire_time":365,"enable_telemetry'
            '":true,"expiry_notification_time":2,"name":"get-wifi","notify_expi'
            'ry":true,"ssid":"Corp","sso":{"idp_cert":"-----BEGIN CERTIFICATE--'
            '---\\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\\n-----E'
            'ND CERTIFICATE-----","idp_sign_algo":"sha256","idp_sso_url":"https'
            '://yourorg.onelogin.com/trust/saml2/http-post/sso/138130","issuer"'
            ':"https://app.onelogin.com/saml/metadata/138130","nameid_format":"'
            'email","sso_role_matching":[{"assigned":"user","match":"Student"}]'
            ',"use_sso_role_for_cert":true}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Org NAC Portal
    def test_create_org_nac_portal(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_org_nac_portal(org_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"access_type":"wireless","cert_expire_time":365,"enable_telemetry'
            '":true,"expiry_notification_time":2,"name":"get-wifi","notify_expi'
            'ry":true,"ssid":"Corp","sso":{"idp_cert":"-----BEGIN CERTIFICATE--'
            '---\\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\\n-----E'
            'ND CERTIFICATE-----","idp_sign_algo":"sha256","idp_sso_url":"https'
            '://yourorg.onelogin.com/trust/saml2/http-post/sso/138130","issuer"'
            ':"https://app.onelogin.com/saml/metadata/138130","nameid_format":"'
            'email","sso_role_matching":[{"assigned":"user","match":"Student"}]'
            ',"use_sso_role_for_cert":true}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Delete Org NAC Portal
    def test_delete_org_nac_portal(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nacportal_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        self.controller.delete_org_nac_portal(org_id, nacportal_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Get List of Org NAC Portal SSO Latest Failures
    def test_list_org_nac_portal_sso_latest_failures(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nacportal_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        page = 1
        limit = 100
        start = None
        end = None
        duration = '1d'

        # Perform the API call through the SDK function
        result = self.controller.list_org_nac_portal_sso_latest_failures(org_id, nacportal_id, page, limit, start, end, duration)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"results":[{"detail":"string","saml_assertion_xml":"string","time'
            'stamp":0}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Update Org NAC Portal Template
    def test_update_org_nac_portal_tempalte(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nacportal_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        body = None

        # Perform the API call through the SDK function
        self.controller.update_org_nac_portal_tempalte(org_id, nacportal_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Upload background image for NAC Portal
    def test_upload_org_nac_portal_image(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nacportal_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        file = None
        json = None

        # Perform the API call through the SDK function
        self.controller.upload_org_nac_portal_image(org_id, nacportal_id, file, json)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Delete background image for NAC Portal
    #
    #
    #If image is not uploaded or is deleted, NAC Portal will use default image.
    def test_delete_org_nac_portal_image(self):
        # Parameters for the API call
        org_id = '000000ab-00ab-00ab-00ab-0000000000ab'
        nacportal_id = '000000ab-00ab-00ab-00ab-0000000000ab'

        # Perform the API call through the SDK function
        self.controller.delete_org_nac_portal_image(org_id, nacportal_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

