# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from mistapi.configuration import Configuration
from mistapi.controllers.base_controller import BaseController
from mistapi.configuration import Environment
from mistapi.http.auth.api_token import ApiToken
from mistapi.http.auth.basic_auth import BasicAuth
from mistapi.http.auth.csrf_token import CsrfToken
from mistapi.controllers.orgs_nac_tags_controller import OrgsNACTagsController
from mistapi.controllers.orgs_nac_portals_controller\
    import OrgsNACPortalsController


class MistapiClient(object):
    @LazyProperty
    def orgs_nac_tags(self):
        return OrgsNACTagsController(self.global_configuration)

    @LazyProperty
    def orgs_nac_portals(self):
        return OrgsNACPortalsController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, api_token_credentials=None,
                 basic_auth_credentials=None, csrf_token_credentials=None,
                 config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment,
            api_token_credentials=api_token_credentials,
            basic_auth_credentials=basic_auth_credentials,
            csrf_token_credentials=csrf_token_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['apiToken', 'basicAuth',
                                                    'csrfToken']}
        self.auth_managers['apiToken'] = ApiToken(
            self.config.api_token_credentials)
        self.auth_managers['basicAuth'] = BasicAuth(
            self.config.basic_auth_credentials)
        self.auth_managers['csrfToken'] = CsrfToken(
            self.config.csrf_token_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

