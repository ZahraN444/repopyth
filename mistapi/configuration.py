# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from enum import Enum
from apimatic_core.http.configurations.http_client_configuration import HttpClientConfiguration
from apimatic_requests_client_adapter.requests_client import RequestsClient


class Environment(Enum):
    """An enum for SDK environments"""
    PRODUCTION = 0
    ENVIRONMENT2 = 1
    ENVIRONMENT3 = 2
    ENVIRONMENT4 = 3
    ENVIRONMENT5 = 4
    ENVIRONMENT6 = 5
    ENVIRONMENT7 = 6
    ENVIRONMENT8 = 7


class Server(Enum):
    """An enum for API servers"""
    DEFAULT = 0


class Configuration(HttpClientConfiguration):
    """A class used for configuring the SDK by a user.
    """

    @property
    def environment(self):
        return self._environment

    @property
    def api_token_credentials(self):
        return self._api_token_credentials

    @property
    def basic_auth_credentials(self):
        return self._basic_auth_credentials

    @property
    def csrf_token_credentials(self):
        return self._csrf_token_credentials

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, api_token_credentials=None,
                 basic_auth_credentials=None, csrf_token_credentials=None):
        if retry_methods is None:
            retry_methods = ['GET', 'PUT']

        if retry_statuses is None:
            retry_statuses = [408, 413, 429, 500, 502, 503, 504, 521, 522, 524]

        super().__init__(http_client_instance,
                         override_http_client_configuration, http_call_back,
                         timeout, max_retries, backoff_factor, retry_statuses,
                         retry_methods)

        # Current API environment
        self._environment = environment

        # The object holding Custom Header Signature credentials
        self._api_token_credentials = api_token_credentials

        # The object holding Basic Authentication credentials
        self._basic_auth_credentials = basic_auth_credentials

        # The object holding Custom Header Signature credentials
        self._csrf_token_credentials = csrf_token_credentials

        # The Http Client to use for making requests.
        self.set_http_client(self.create_http_client())

    def clone_with(self, http_client_instance=None,
                   override_http_client_configuration=None, http_call_back=None,
                   timeout=None, max_retries=None, backoff_factor=None,
                   retry_statuses=None, retry_methods=None, environment=None,
                   api_token_credentials=None, basic_auth_credentials=None,
                   csrf_token_credentials=None):
        http_client_instance = http_client_instance or self.http_client_instance
        override_http_client_configuration = override_http_client_configuration or self.override_http_client_configuration
        http_call_back = http_call_back or self.http_callback
        timeout = timeout or self.timeout
        max_retries = max_retries or self.max_retries
        backoff_factor = backoff_factor or self.backoff_factor
        retry_statuses = retry_statuses or self.retry_statuses
        retry_methods = retry_methods or self.retry_methods
        environment = environment or self.environment
        api_token_credentials = api_token_credentials or self.api_token_credentials
        basic_auth_credentials = basic_auth_credentials or self.basic_auth_credentials
        csrf_token_credentials = csrf_token_credentials or self.csrf_token_credentials
        return Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, api_token_credentials=api_token_credentials,
            basic_auth_credentials=basic_auth_credentials,
            csrf_token_credentials=csrf_token_credentials
        )

    def create_http_client(self):
        return RequestsClient(
            timeout=self.timeout, max_retries=self.max_retries,
            backoff_factor=self.backoff_factor, retry_statuses=self.retry_statuses,
            retry_methods=self.retry_methods,
            http_client_instance=self.http_client_instance,
            override_http_client_configuration=self.override_http_client_configuration,
            response_factory=self.http_response_factory
        )

    # All the environments the SDK can run in
    environments = {
        Environment.PRODUCTION: {
            Server.DEFAULT: 'https://api.mist.com'
        },
        Environment.ENVIRONMENT2: {
            Server.DEFAULT: 'https://api.gc1.mist.com'
        },
        Environment.ENVIRONMENT3: {
            Server.DEFAULT: 'https://api.ac2.mist.com'
        },
        Environment.ENVIRONMENT4: {
            Server.DEFAULT: 'https://api.gc2.mist.com'
        },
        Environment.ENVIRONMENT5: {
            Server.DEFAULT: 'https://api.eu.mist.com'
        },
        Environment.ENVIRONMENT6: {
            Server.DEFAULT: 'https://api.gc3.mist.com'
        },
        Environment.ENVIRONMENT7: {
            Server.DEFAULT: 'https://api.ac6.mist.com'
        },
        Environment.ENVIRONMENT8: {
            Server.DEFAULT: 'https://api.ac5.mist.com'
        }
    }

    def get_base_uri(self, server=Server.DEFAULT):
        """Generates the appropriate base URI for the environment and the
        server.

        Args:
            server (Configuration.Server): The server enum for which the base
            URI is required.

        Returns:
            String: The base URI.

        """
        return self.environments[self.environment][server]
