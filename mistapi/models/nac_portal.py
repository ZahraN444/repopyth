# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.nac_portal_sso import NacPortalSso


class NacPortal(object):

    """Implementation of the 'nac_portal' model.

    TODO: type model description here.

    Attributes:
        access_type (NacPortalAccessTypeEnum): TODO: type description here.
        bg_image_url (str): background image
        cert_expire_time (int): in days
        enable_telemetry (bool): model, version, fingering, events
            (connecting, disconnect, roaming), which ap
        expiry_notification_time (int): in days
        guest_portal_config (NacPortalSso): TODO: type description here.
        name (str): TODO: type description here.
        notify_expiry (bool): phase 2
        ssid (str): TODO: type description here.
        sso (NacPortalSso): TODO: type description here.
        template_url (str): TODO: type description here.
        thumbnail_url (str): TODO: type description here.
        tos (str): TODO: type description here.
        mtype (NacPortalTypeEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "access_type": 'access_type',
        "bg_image_url": 'bg_image_url',
        "cert_expire_time": 'cert_expire_time',
        "enable_telemetry": 'enable_telemetry',
        "expiry_notification_time": 'expiry_notification_time',
        "guest_portal_config": 'guest_portal_config',
        "name": 'name',
        "notify_expiry": 'notify_expiry',
        "ssid": 'ssid',
        "sso": 'sso',
        "template_url": 'template_url',
        "thumbnail_url": 'thumbnail_url',
        "tos": 'tos',
        "mtype": 'type'
    }

    _optionals = [
        'access_type',
        'bg_image_url',
        'cert_expire_time',
        'enable_telemetry',
        'expiry_notification_time',
        'guest_portal_config',
        'name',
        'notify_expiry',
        'ssid',
        'sso',
        'template_url',
        'thumbnail_url',
        'tos',
        'mtype',
    ]

    def __init__(self,
                 access_type=APIHelper.SKIP,
                 bg_image_url=APIHelper.SKIP,
                 cert_expire_time=APIHelper.SKIP,
                 enable_telemetry=APIHelper.SKIP,
                 expiry_notification_time=APIHelper.SKIP,
                 guest_portal_config=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 notify_expiry=APIHelper.SKIP,
                 ssid=APIHelper.SKIP,
                 sso=APIHelper.SKIP,
                 template_url=APIHelper.SKIP,
                 thumbnail_url=APIHelper.SKIP,
                 tos=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the NacPortal class"""

        # Initialize members of the class
        if access_type is not APIHelper.SKIP:
            self.access_type = access_type 
        if bg_image_url is not APIHelper.SKIP:
            self.bg_image_url = bg_image_url 
        if cert_expire_time is not APIHelper.SKIP:
            self.cert_expire_time = cert_expire_time 
        if enable_telemetry is not APIHelper.SKIP:
            self.enable_telemetry = enable_telemetry 
        if expiry_notification_time is not APIHelper.SKIP:
            self.expiry_notification_time = expiry_notification_time 
        if guest_portal_config is not APIHelper.SKIP:
            self.guest_portal_config = guest_portal_config 
        if name is not APIHelper.SKIP:
            self.name = name 
        if notify_expiry is not APIHelper.SKIP:
            self.notify_expiry = notify_expiry 
        if ssid is not APIHelper.SKIP:
            self.ssid = ssid 
        if sso is not APIHelper.SKIP:
            self.sso = sso 
        if template_url is not APIHelper.SKIP:
            self.template_url = template_url 
        if thumbnail_url is not APIHelper.SKIP:
            self.thumbnail_url = thumbnail_url 
        if tos is not APIHelper.SKIP:
            self.tos = tos 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        access_type = dictionary.get("access_type") if dictionary.get("access_type") else APIHelper.SKIP
        bg_image_url = dictionary.get("bg_image_url") if dictionary.get("bg_image_url") else APIHelper.SKIP
        cert_expire_time = dictionary.get("cert_expire_time") if dictionary.get("cert_expire_time") else APIHelper.SKIP
        enable_telemetry = dictionary.get("enable_telemetry") if "enable_telemetry" in dictionary.keys() else APIHelper.SKIP
        expiry_notification_time = dictionary.get("expiry_notification_time") if dictionary.get("expiry_notification_time") else APIHelper.SKIP
        guest_portal_config = NacPortalSso.from_dictionary(dictionary.get('guest_portal_config')) if 'guest_portal_config' in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        notify_expiry = dictionary.get("notify_expiry") if "notify_expiry" in dictionary.keys() else APIHelper.SKIP
        ssid = dictionary.get("ssid") if dictionary.get("ssid") else APIHelper.SKIP
        sso = NacPortalSso.from_dictionary(dictionary.get('sso')) if 'sso' in dictionary.keys() else APIHelper.SKIP
        template_url = dictionary.get("template_url") if dictionary.get("template_url") else APIHelper.SKIP
        thumbnail_url = dictionary.get("thumbnail_url") if dictionary.get("thumbnail_url") else APIHelper.SKIP
        tos = dictionary.get("tos") if dictionary.get("tos") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(access_type,
                   bg_image_url,
                   cert_expire_time,
                   enable_telemetry,
                   expiry_notification_time,
                   guest_portal_config,
                   name,
                   notify_expiry,
                   ssid,
                   sso,
                   template_url,
                   thumbnail_url,
                   tos,
                   mtype)
