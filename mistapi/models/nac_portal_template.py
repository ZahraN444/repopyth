# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper


class NacPortalTemplate(object):

    """Implementation of the 'nac_portal_template' model.

    TODO: type model description here.

    Attributes:
        alignment (NacPortalTypeEnum1Enum): TODO: type description here.
        color (str): TODO: type description here.
        logo (str): custom logo custom logo with â€œdata:image/png;base64,â€
            format. default null, uses Juniper Mist Logo.
        powered_by (bool): whether to hide â€œPowered by Juniper Mistâ€ and
            email footers

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "alignment": 'alignment',
        "color": 'color',
        "logo": 'logo',
        "powered_by": 'poweredBy'
    }

    _optionals = [
        'alignment',
        'color',
        'logo',
        'powered_by',
    ]

    def __init__(self,
                 alignment=APIHelper.SKIP,
                 color='#1074bc',
                 logo=APIHelper.SKIP,
                 powered_by=False):
        """Constructor for the NacPortalTemplate class"""

        # Initialize members of the class
        if alignment is not APIHelper.SKIP:
            self.alignment = alignment 
        self.color = color 
        if logo is not APIHelper.SKIP:
            self.logo = logo 
        self.powered_by = powered_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        alignment = dictionary.get("alignment") if dictionary.get("alignment") else APIHelper.SKIP
        color = dictionary.get("color") if dictionary.get("color") else '#1074bc'
        logo = dictionary.get("logo") if dictionary.get("logo") else APIHelper.SKIP
        powered_by = dictionary.get("poweredBy") if dictionary.get("poweredBy") else False
        # Return an object of this model
        return cls(alignment,
                   color,
                   logo,
                   powered_by)
