# -*- coding: utf-8 -*-

"""
mistapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mistapi.api_helper import APIHelper
from mistapi.models.nac_portal_sso_role_matching import NacPortalSsoRoleMatching


class NacPortalSso(object):

    """Implementation of the 'nac_portal_sso' model.

    TODO: type model description here.

    Attributes:
        idp_cert (str): TODO: type description here.
        idp_sign_algo (str): TODO: type description here.
        idp_sso_url (str): TODO: type description here.
        issuer (str): TODO: type description here.
        nameid_format (str): TODO: type description here.
        sso_role_matching (List[NacPortalSsoRoleMatching]): TODO: type
            description here.
        use_sso_role_for_cert (bool): if it's desired to inject a role into
            Cert's Subject (so it can be used later on in policy)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "idp_cert": 'idp_cert',
        "idp_sign_algo": 'idp_sign_algo',
        "idp_sso_url": 'idp_sso_url',
        "issuer": 'issuer',
        "nameid_format": 'nameid_format',
        "sso_role_matching": 'sso_role_matching',
        "use_sso_role_for_cert": 'use_sso_role_for_cert'
    }

    _optionals = [
        'idp_cert',
        'idp_sign_algo',
        'idp_sso_url',
        'issuer',
        'nameid_format',
        'sso_role_matching',
        'use_sso_role_for_cert',
    ]

    def __init__(self,
                 idp_cert=APIHelper.SKIP,
                 idp_sign_algo=APIHelper.SKIP,
                 idp_sso_url=APIHelper.SKIP,
                 issuer=APIHelper.SKIP,
                 nameid_format=APIHelper.SKIP,
                 sso_role_matching=APIHelper.SKIP,
                 use_sso_role_for_cert=APIHelper.SKIP):
        """Constructor for the NacPortalSso class"""

        # Initialize members of the class
        if idp_cert is not APIHelper.SKIP:
            self.idp_cert = idp_cert 
        if idp_sign_algo is not APIHelper.SKIP:
            self.idp_sign_algo = idp_sign_algo 
        if idp_sso_url is not APIHelper.SKIP:
            self.idp_sso_url = idp_sso_url 
        if issuer is not APIHelper.SKIP:
            self.issuer = issuer 
        if nameid_format is not APIHelper.SKIP:
            self.nameid_format = nameid_format 
        if sso_role_matching is not APIHelper.SKIP:
            self.sso_role_matching = sso_role_matching 
        if use_sso_role_for_cert is not APIHelper.SKIP:
            self.use_sso_role_for_cert = use_sso_role_for_cert 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        idp_cert = dictionary.get("idp_cert") if dictionary.get("idp_cert") else APIHelper.SKIP
        idp_sign_algo = dictionary.get("idp_sign_algo") if dictionary.get("idp_sign_algo") else APIHelper.SKIP
        idp_sso_url = dictionary.get("idp_sso_url") if dictionary.get("idp_sso_url") else APIHelper.SKIP
        issuer = dictionary.get("issuer") if dictionary.get("issuer") else APIHelper.SKIP
        nameid_format = dictionary.get("nameid_format") if dictionary.get("nameid_format") else APIHelper.SKIP
        sso_role_matching = None
        if dictionary.get('sso_role_matching') is not None:
            sso_role_matching = [NacPortalSsoRoleMatching.from_dictionary(x) for x in dictionary.get('sso_role_matching')]
        else:
            sso_role_matching = APIHelper.SKIP
        use_sso_role_for_cert = dictionary.get("use_sso_role_for_cert") if "use_sso_role_for_cert" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(idp_cert,
                   idp_sign_algo,
                   idp_sso_url,
                   issuer,
                   nameid_format,
                   sso_role_matching,
                   use_sso_role_for_cert)
